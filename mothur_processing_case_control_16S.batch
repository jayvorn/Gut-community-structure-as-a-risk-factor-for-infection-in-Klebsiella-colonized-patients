system(echo 'Hi Jay! I hope this goes well!')
set.seed(seed=20220212)
set.dir(input=/scratch/jayvorn_root/jayvorn0/Case_control/processing)
set.dir(output=/scratch/jayvorn_root/jayvorn0/Case_control/processing)
make.file(inputdir=/scratch/jayvorn_root/jayvorn0/Case_control/reads,type=fastq,prefix=case_control)
get.mimarkspackage(file=case_control.files, package=miscellaneous)
rename.file(input=case_control.tsv, new=case_control_mimarks_template.tsv)
#system(mv case_control.tsv case_control.mimarks_data_package.tsv)
system(echo 'LLLLEEEEETTTTSSSSS MAKE SOME CONTTTIIIIGGGGSSSSSS')
make.contigs(file=case_control.files, maxambig=0, maxlength=275, maxhomop=8)
summary.seqs(fasta=current, count=current)
unique.seqs(fasta=current, count=current)
system(echo 'Running quality control on sequences...')
pcr.seqs(fasta=silva.seed_v132.align, start=11894, end=25319, keepdots=F, inputdir=/scratch/jayvorn_root/jayvorn0/Case_control/silva.seed_v132)
rename.file(input=silva.seed_v132.pcr.align, new=silva.v4.fasta)
set.dir(input=/scratch/jayvorn_root/jayvorn0/Case_control/processing)
align.seqs(fasta=case_control.trim.contigs.unique.fasta, reference=silva.v4.fasta)
screen.seqs(fasta=current, count=current, start=1969, end=11551)
filter.seqs(fasta=current, vertical=T, trump=.)
unique.seqs(fasta=current, count=current)
pre.cluster(count=current, diffs=2)
chimera.vsearch(count=current, count=current, dereplicate=t)
summary.seqs(fasta=current, count=current)
classify.seqs(fasta=current, count=current, reference=/scratch/jayvorn_root/jayvorn0/Case_control/trainset18_062020.rdp/trainset18_062020.rdp.fasta, taxonomy=/scratch/jayvorn_root/jayvorn0/Case_control/trainset18_062020.rdp/trainset18_062020.rdp.tax, cutoff=80)
remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota)
summary.seqs(fasta=current, count=current)
summary.tax(taxonomy=current, count=current)
system(echo 'Running error estimation...')
get.groups(count=current, fasta=current, groups=MockZymoPosB-MockZymoPosC-MockZymoPosD)
seq.error(fasta=current, count=current, reference=/scratch/jayvorn_root/jayvorn0/Case_control/mock_community/zymo.mock_.16S_fasta.fasta, aligned=F)
dist.seqs(fasta=current, cutoff=0.03)
cluster(column=current, count=current)
make.shared(list=current, count=current, label=0.03)
rarefaction.single(shared=current)
get.current()
system(echo 'Preparing for OTU-based analysis...')
set.dir(input=/scratch/jayvorn_root/jayvorn0/Case_control/processing)
set.dir(output=/scratch/jayvorn_root/jayvorn0/Case_control/processing)
set.current(count=case_control.trim.contigs.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table)
set.current(fasta=case_control.trim.contigs.unique.good.filter.unique.precluster.denovo.vsearch.pick.fasta)
remove.groups(count=current, fasta=current, taxonomy=current, groups=MockZymoPosB-MockZymoPosC-MockZymoPosD-WaterNegB-WaterNegC-WaterNegD-PR14747-PR14930-PR16057-PR17458-PR17680-PR21717-PR21400-PR16374-PR17998-PR19584-PR20811-PR21489-PR26579-PR27035-PR27007-PR28038-PR28202-PR28778)
rename.file(fasta=current, count=current, taxonomy=current, prefix=final_case_control)
summary.seqs(fasta=current, count=current)
dist.seqs(fasta=current, cutoff=0.03)
cluster(column=current, count=current)
make.shared(list=current, count=current, label=0.03)
classify.otu(list=current, count=current, taxonomy=current, label=0.03)
system(cp /scratch/jayvorn_root/jayvorn0/Case_control/processing/final_case_control.opti_mcc.shared raw_data)
system(cp /scratch/jayvorn_root/jayvorn0/Case_control/processing/final_case_control.opti_mcc.0.03.cons.taxonomy raw_data)
system(echo 'Getting representative sequences...')
dist.seqs(fasta=current, cutoff=0.10)
cluster(column=current, count=current)
get.oturep(column=current, list=current, count=current, fasta=current)
system(cp /scratch/jayvorn_root/jayvorn0/Case_control/processing/final_case_control.opti_mcc.0.03.rep.fasta raw_data)
system(echo 'Preparing for phylotype-based analysis...')
set.current(count=final_case_control.count_table)
phylotype(taxonomy=current)
make.shared(list=current, count=current, label=1)
classify.otu(list=current, count=current, taxonomy=current, label=1)
get.current()
system(echo 'Counting groups...')
count.groups(shared=final_case_control.opti_mcc.shared)
system(echo 'END PART 1')
